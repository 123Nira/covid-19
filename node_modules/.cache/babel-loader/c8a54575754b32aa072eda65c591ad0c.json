{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Desktop\\\\WebDev101-master\\\\weather-application\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { MenuItem, FormControl, Select, Card, CardContent } from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // STATE = How to write a variable in REACT;\n  // https://disease.sh/v3/covid-19/countries\n  // useEffect : Runs a piece of code based on a given condition.\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  useEffect(() => {\n    // The code inside here will run once when the component loads and not again (provided the condition dependency array must be empty)\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\").then(response => response.json()).then(data => {\n        const countries = data.map(country => ({\n          // map returns an array\n          name: country.country,\n          // this will give the country name like United State, United Kingdom;\n          value: country.countryInfo.iso2 // this will country code like UK, USA ,FR\n\n        }));\n        setCountries(countries);\n      });\n    };\n\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = event => {\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app__left\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app__header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"COVID-19 TRACKER\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          className: \"app__dropdown\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            variant: \"outlined\",\n            value: country,\n            onChange: onCountryChange,\n            children: [\"     \", /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"worldwide\",\n              children: \"Worldwide\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 13\n            }, this), countries.map(country => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: country.value,\n              children: country.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 16\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 10\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app__stats\",\n        children: [/*#__PURE__*/_jsxDEV(InfoBox, {\n          title: \"Coronavirus_Cases\",\n          cases: 1000,\n          total: 43333\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(InfoBox, {\n          title: \"Recovered\",\n          cases: 1233,\n          total: 3343\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(InfoBox, {\n          title: \"Deaths\",\n          cases: 121,\n          total: 3435\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 10\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(Map, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      className: \"app_right\",\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Live Cased by Country\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Worldwide new Cases\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 10\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 7\n  }, this);\n};\n\n_s(App, \"7GJRbwVCgktbwdRscWsQKcK/Nng=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Dell/Desktop/WebDev101-master/weather-application/src/App.js"],"names":["React","useState","useEffect","MenuItem","FormControl","Select","Card","CardContent","InfoBox","Map","App","countries","setCountries","country","setCountry","getCountriesData","fetch","then","response","json","data","map","name","value","countryInfo","iso2","onCountryChange","event","countryCode","target"],"mappings":"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","sourcesContent":["import React,{useState,useEffect} from \"react\";\r\nimport \"./App.css\";\r\nimport {MenuItem,FormControl,Select,Card, CardContent } from \"@material-ui/core\"\r\nimport InfoBox from \"./InfoBox\";\r\nimport Map from \"./Map\";\r\nconst App = () => {\r\n// STATE = How to write a variable in REACT;\r\n\r\n// https://disease.sh/v3/covid-19/countries\r\n\r\n// useEffect : Runs a piece of code based on a given condition.\r\nconst [countries,setCountries]=useState([]);\r\nconst [country,setCountry]=useState(\"worldwide\");\r\n\r\nuseEffect (()=>{\r\n// The code inside here will run once when the component loads and not again (provided the condition dependency array must be empty)\r\nconst getCountriesData = async () =>{\r\n  await fetch(\"https://disease.sh/v3/covid-19/countries\")\r\n         .then((response)=>response.json())\r\n         .then((data)=>{\r\n            const countries= data.map((country)=>({        // map returns an array\r\n               name : country.country,                     // this will give the country name like United State, United Kingdom;\r\n               value : country.countryInfo.iso2             // this will country code like UK, USA ,FR\r\n            }));\r\n           setCountries(countries);\r\n         });\r\n      }\r\n         getCountriesData();\r\n   }, []);\r\n\r\nconst onCountryChange = (event)=>{\r\n   const countryCode=event.target.value;\r\n   setCountry(countryCode);\r\n}\r\n\r\n\r\n   return (\r\n      <div className=\"app\" >\r\n      <div className=\"app__left\">\r\n       <div className=\"app__header\">\r\n       <h1>COVID-19 TRACKER</h1>\r\n         <FormControl className=\"app__dropdown\">\r\n            <Select variant=\"outlined\" value={country} onChange={onCountryChange} >     {/* What ever we put inside the value like value={country} \r\n                                                              this by default set in the dropdown as worldwide */}    \r\n            <MenuItem value=\"worldwide\">Worldwide</MenuItem>\r\n            {/* Loop through all the countries and show a drop down list of the option */}\r\n              {countries.map((country)=>(\r\n               <MenuItem value={country.value}>{country.name}</MenuItem>\r\n              ))}\r\n            </Select>\r\n         </FormControl>\r\n       </div>\r\n       <div className=\"app__stats\">     \r\n         <InfoBox title=\"Coronavirus_Cases\" cases={1000} total={43333} />\r\n         <InfoBox title=\"Recovered\" cases={1233} total={3343} />\r\n         <InfoBox title=\"Deaths\" cases={121} total={3435} />\r\n       </div>\r\n        <Map />\r\n        </div>\r\n\r\n        <Card className=\"app_right\">\r\n         <CardContent>\r\n           <h3>Live Cased by Country</h3>\r\n            {/* Table */}\r\n             \r\n            <h3>Worldwide new Cases</h3>\r\n            {/* Graph */}\r\n         \r\n         </CardContent>\r\n\r\n        </Card>\r\n      </div>\r\n         )\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}