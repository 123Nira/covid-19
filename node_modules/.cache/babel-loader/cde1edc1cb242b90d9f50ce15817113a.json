{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Desktop\\\\WebDev101-master\\\\weather-application\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { MenuItem, FormControl, Select, Card, CardContent } from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport { sortData } from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // STATE = How to write a variable in REACT;\n  // https://disease.sh/v3/covid-19/countries\n  // useEffect : Runs a piece of code based on a given condition.\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\").then(response => response.json()).then(data => {\n      setCountryInfo(data);\n    });\n  }, []);\n  useEffect(() => {\n    // The code inside here will run once when the component loads and not again (provided the condition dependency array must be empty)\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\").then(response => response.json()).then(data => {\n        const countries = data.map(country => ({\n          // map returns an array\n          name: country.country,\n          // this will give the country name like United State, United Kingdom;\n          value: country.countryInfo.iso2 // this will country code like UK, USA ,FR\n\n        }));\n        const sortedData = sortData(data);\n        console.log(sortedData);\n        setTableData(sortedData);\n        setCountries(countries);\n      });\n    };\n\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async event => {\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n    const url = countryCode === 'worldwide' ? \"https://disease.sh/v3/covid-19/all\" : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url).then(response => response.json()).then(data => {\n      setCountry(countryCode); //All of the data from country response.\n\n      setCountryInfo(data);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app__left\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app__header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"COVID-19 TRACKER\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          className: \"app__dropdown\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            variant: \"outlined\",\n            value: country,\n            onChange: onCountryChange,\n            children: [\" \", /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"worldwide\",\n              children: \"Worldwide\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 13\n            }, this), countries.map(country => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: country.value,\n              children: country.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 16\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 10\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app__stats\",\n        children: [/*#__PURE__*/_jsxDEV(InfoBox, {\n          title: \"Coronavirus Cases\",\n          cases: countryInfo.todayCases,\n          total: countryInfo.cases\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(InfoBox, {\n          title: \"Recovered\",\n          cases: countryInfo.todayRecovered,\n          total: countryInfo.recovered\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(InfoBox, {\n          title: \"Deaths\",\n          cases: countryInfo.todayDeaths,\n          total: countryInfo.deaths\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 10\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(Map, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      className: \"app__right\",\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Live Cases By Country\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(Table, {\n          countries: tableData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 14\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"WorldWide New Cases\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(LineGraph, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 10\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 7\n  }, this);\n};\n\n_s(App, \"pN9OYzAItyRhRnna4hv5hhUxYX8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Dell/Desktop/WebDev101-master/weather-application/src/App.js"],"names":["React","useState","useEffect","MenuItem","FormControl","Select","Card","CardContent","InfoBox","Map","Table","sortData","LineGraph","App","countries","setCountries","country","setCountry","countryInfo","setCountryInfo","tableData","setTableData","fetch","then","response","json","data","getCountriesData","map","name","value","iso2","sortedData","console","log","onCountryChange","event","countryCode","target","url","todayCases","cases","todayRecovered","recovered","todayDeaths","deaths"],"mappings":"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","sourcesContent":["import React,{useState,useEffect} from \"react\";\r\nimport \"./App.css\";\r\nimport {MenuItem,FormControl,Select,Card, CardContent} from \"@material-ui/core\"\r\nimport InfoBox from \"./InfoBox\";\r\nimport Map from \"./Map\";\r\nimport Table from \"./Table\";\r\nimport {sortData} from \"./util\";\r\nimport LineGraph from \"./LineGraph\";\r\nconst App = () => {\r\n// STATE = How to write a variable in REACT;\r\n\r\n// https://disease.sh/v3/covid-19/countries\r\n\r\n// useEffect : Runs a piece of code based on a given condition.\r\nconst [countries,setCountries]=useState([]);\r\nconst [country,setCountry]=useState(\"worldwide\");\r\nconst [countryInfo,setCountryInfo]=useState({});\r\nconst [tableData,setTableData]=useState([]);\r\n\r\nuseEffect(()=>{\r\n   fetch(\"https://disease.sh/v3/covid-19/all\")\r\n   .then((response)=>response.json())\r\n   .then(data=>{\r\n      setCountryInfo(data)\r\n   })\r\n},[]);\r\nuseEffect (()=>{\r\n// The code inside here will run once when the component loads and not again (provided the condition dependency array must be empty)\r\nconst getCountriesData = async () =>{\r\n  await fetch(\"https://disease.sh/v3/covid-19/countries\")\r\n         .then((response)=>response.json())\r\n         .then((data)=>{\r\n            const countries= data.map((country)=>({        // map returns an array\r\n               name : country.country,                     // this will give the country name like United State, United Kingdom;\r\n               value : country.countryInfo.iso2            // this will country code like UK, USA ,FR\r\n            }));\r\n            \r\n            const sortedData = sortData(data);\r\n            console.log(sortedData);\r\n           setTableData(sortedData);\r\n           setCountries(countries);\r\n         });\r\n      }\r\n         getCountriesData();\r\n   }, []);\r\n\r\nconst onCountryChange = async (event)=>{\r\n   const countryCode=event.target.value;\r\n   setCountry(countryCode);\r\n   \r\n   const url=countryCode==='worldwide'? \"https://disease.sh/v3/covid-19/all\" : `https://disease.sh/v3/covid-19/countries/${countryCode}`\r\n\r\n   await fetch(url)\r\n   .then((response)=>response.json())\r\n   .then(data=>{\r\n         setCountry(countryCode);\r\n         //All of the data from country response.\r\n         setCountryInfo(data);\r\n   })\r\n\r\n}\r\n\r\n   return (\r\n      <div className=\"app\" >\r\n      <div className=\"app__left\">\r\n       <div className=\"app__header\">\r\n       <h1>COVID-19 TRACKER</h1>\r\n         <FormControl className=\"app__dropdown\">\r\n            <Select variant=\"outlined\" value={country} onChange={onCountryChange} > {/* What ever we put inside the value like value={country} \r\n                                                                                    this by default set in the dropdown as worldwide */}    \r\n            <MenuItem value=\"worldwide\">Worldwide</MenuItem>\r\n            {/* Loop through all the countries and show a drop down list of the option */}\r\n              {countries.map((country)=>(\r\n               <MenuItem value={country.value}>{country.name}</MenuItem>\r\n              ))}\r\n            </Select>\r\n         </FormControl>\r\n       </div>\r\n       <div className=\"app__stats\">     \r\n         <InfoBox title=\"Coronavirus Cases\" cases={countryInfo.todayCases} total={countryInfo.cases} />\r\n         <InfoBox title=\"Recovered\" cases={countryInfo.todayRecovered} total={countryInfo.recovered} />\r\n         <InfoBox title=\"Deaths\" cases={countryInfo.todayDeaths} total={countryInfo.deaths} />\r\n       </div>\r\n        <Map />\r\n        </div>\r\n\r\n        <Card className=\"app__right\">\r\n         <CardContent>\r\n           <h3>Live Cases By Country</h3>\r\n            {/* Table */}\r\n             <Table countries={tableData} />\r\n            <h3>WorldWide New Cases</h3>\r\n            {/* Graph */}\r\n            <LineGraph />\r\n         </CardContent>\r\n        </Card>\r\n      </div>\r\n         )\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}